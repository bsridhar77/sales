//lookup works and docs returned on all the fields of _id composite fielddb.getCollection('mycollection').find({  "_id" : {			"timestamp" : ISODate("2016-08-25T16:14:21.877Z"),			"category" : "sales"		}  })//lookup does not work if I query on just one of the fields in the composite field _id//In this case a equal comparision on "timestamp" field of the _id composite fielddb.getCollection('mycollection').find({  "_id" : {				"timestamp" :ISODate("2016-08-25T16:14:21.877Z")		  }})//lookup does not work if I query on just one of the fields in the composite field _id//In this case a date comparision on the "timestamp" field of _id composite fielddb.getCollection('mycollection').find({  "_id" : {        "timestamp" : {                "$gte":ISODate("2016-08-25T16:14:21.877Z")        }    }  })//lookup does not work if there is a date comparison of one of the fields of _id composite field//and other fields it is equal comparisondb.getCollection('mycollection').find({  "_id" : {        "timestamp" : {                "$gte":ISODate("2016-08-25T16:14:21.877Z")        },        "category" : "sales"    }  })//lookup works if I query on just one of the fields in the composite field _id//In this case a equal comparision on "timestamp" field of the _id composite field//But, by using dot notation as belowdb.getCollection('mycollection').find({  "_id.timestamp" : ISODate("2016-08-25T16:14:21.877Z")})//lookup works if I query on just one of the fields in the composite field _id//In this case a date comparision on "timestamp" field of the _id composite field//But, by using dot notation as belowdb.getCollection('mycollection').find({  "_id.timestamp" : {        "$gte":ISODate("2016-08-25T16:14:21.877Z")  }})//lookup works if I query on all the fields in the composite _id field//In this case a equals comparision on "timestamp" field of the _id composite field//And other fields are also equal comaparison//But, by using dot notation as belowdb.getCollection('mycollection').find({        "_id.timestamp" : ISODate("2016-08-25T16:14:21.877Z"),		"_id.category"  : "sales"  })//lookup works if I query on all the fields in the composite _id field//In this case a date comparision on "timestamp" field of the _id composite field//And other fields are equal comaparison//But, by using dot notation as belowdb.getCollection('mycollection').find({		"_id.timestamp" : {                "$gte":ISODate("2016-08-25T16:14:21.877Z")        },      "_id.category"  : "sales"})In all above cases the lookup works succesfully and docs are returned only when using the dot notation.But, using the .explain() function , I see there is no index being used and a collection scan is being done.We would like to leverage the index already existing on the "_id" field and use it as a composite field as above.We want to use the default _id index for the composite columns in date queries and also for querying on partial fields ofthe composite field as shown above.If not, we might have to have extract the fields from the composite _id field as seperate fields on the document.That would mean creating a seperate index on the those fields which are extracted. We do have more than one fields in the composite_id field. I have only showed one field in the above scenarios.I am using MongoDB version: 3.2.3We will also be using Spring Data Mongodb framework to implement the solution.I am looking for a solution to address this problem. Can you please provide us your suggestions on the same.Thanks,Sridhar